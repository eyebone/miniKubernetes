// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: share.proto

#include "share.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace share {
PROTOBUF_CONSTEXPR HelloRequest::HelloRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HelloRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HelloRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HelloRequestDefaultTypeInternal() {}
  union {
    HelloRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HelloRequestDefaultTypeInternal _HelloRequest_default_instance_;
PROTOBUF_CONSTEXPR HelloResponse::HelloResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reply_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HelloResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HelloResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HelloResponseDefaultTypeInternal() {}
  union {
    HelloResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HelloResponseDefaultTypeInternal _HelloResponse_default_instance_;
PROTOBUF_CONSTEXPR ApplyPodRequest::ApplyPodRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ApplyPodRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApplyPodRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApplyPodRequestDefaultTypeInternal() {}
  union {
    ApplyPodRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApplyPodRequestDefaultTypeInternal _ApplyPodRequest_default_instance_;
PROTOBUF_CONSTEXPR DeletePodRequest::DeletePodRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeletePodRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeletePodRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeletePodRequestDefaultTypeInternal() {}
  union {
    DeletePodRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeletePodRequestDefaultTypeInternal _DeletePodRequest_default_instance_;
PROTOBUF_CONSTEXPR GetPodRequest::GetPodRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.podname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPodRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPodRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPodRequestDefaultTypeInternal() {}
  union {
    GetPodRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPodRequestDefaultTypeInternal _GetPodRequest_default_instance_;
PROTOBUF_CONSTEXPR GetPodResponse::GetPodResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.poddata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPodResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPodResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPodResponseDefaultTypeInternal() {}
  union {
    GetPodResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPodResponseDefaultTypeInternal _GetPodResponse_default_instance_;
PROTOBUF_CONSTEXPR StatusResponse::StatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusResponseDefaultTypeInternal() {}
  union {
    StatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
PROTOBUF_CONSTEXPR RegisterNodeRequest::RegisterNodeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nodeip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kubelet_url_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterNodeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterNodeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterNodeRequestDefaultTypeInternal() {}
  union {
    RegisterNodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterNodeRequestDefaultTypeInternal _RegisterNodeRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdatePodStatusRequest::UpdatePodStatusRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdatePodStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdatePodStatusRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdatePodStatusRequestDefaultTypeInternal() {}
  union {
    UpdatePodStatusRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdatePodStatusRequestDefaultTypeInternal _UpdatePodStatusRequest_default_instance_;
PROTOBUF_CONSTEXPR ApplyDeploymentRequest::ApplyDeploymentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ApplyDeploymentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApplyDeploymentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApplyDeploymentRequestDefaultTypeInternal() {}
  union {
    ApplyDeploymentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApplyDeploymentRequestDefaultTypeInternal _ApplyDeploymentRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDeploymentRequest::GetDeploymentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.deploymentname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDeploymentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDeploymentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDeploymentRequestDefaultTypeInternal() {}
  union {
    GetDeploymentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDeploymentRequestDefaultTypeInternal _GetDeploymentRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteDeploymentRequest::DeleteDeploymentRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.deploymentname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteDeploymentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteDeploymentRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteDeploymentRequestDefaultTypeInternal() {}
  union {
    DeleteDeploymentRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteDeploymentRequestDefaultTypeInternal _DeleteDeploymentRequest_default_instance_;
PROTOBUF_CONSTEXPR GetDeploymentResponse::GetDeploymentResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDeploymentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDeploymentResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDeploymentResponseDefaultTypeInternal() {}
  union {
    GetDeploymentResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDeploymentResponseDefaultTypeInternal _GetDeploymentResponse_default_instance_;
PROTOBUF_CONSTEXPR ApplyServiceRequest::ApplyServiceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ApplyServiceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApplyServiceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApplyServiceRequestDefaultTypeInternal() {}
  union {
    ApplyServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApplyServiceRequestDefaultTypeInternal _ApplyServiceRequest_default_instance_;
PROTOBUF_CONSTEXPR GetServiceRequest::GetServiceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.servicename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetServiceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServiceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServiceRequestDefaultTypeInternal() {}
  union {
    GetServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServiceRequestDefaultTypeInternal _GetServiceRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteServiceRequest::DeleteServiceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.servicename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteServiceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteServiceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteServiceRequestDefaultTypeInternal() {}
  union {
    DeleteServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteServiceRequestDefaultTypeInternal _DeleteServiceRequest_default_instance_;
PROTOBUF_CONSTEXPR GetServiceResponse::GetServiceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetServiceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetServiceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetServiceResponseDefaultTypeInternal() {}
  union {
    GetServiceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetServiceResponseDefaultTypeInternal _GetServiceResponse_default_instance_;
PROTOBUF_CONSTEXPR GetNodeRequest::GetNodeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetNodeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetNodeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetNodeRequestDefaultTypeInternal() {}
  union {
    GetNodeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetNodeRequestDefaultTypeInternal _GetNodeRequest_default_instance_;
PROTOBUF_CONSTEXPR GetNodeResponse::GetNodeResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodedata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetNodeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetNodeResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetNodeResponseDefaultTypeInternal() {}
  union {
    GetNodeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetNodeResponseDefaultTypeInternal _GetNodeResponse_default_instance_;
}  // namespace share
static ::_pb::Metadata file_level_metadata_share_2eproto[19];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_share_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_share_2eproto = nullptr;

const uint32_t TableStruct_share_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::share::HelloRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::share::HelloRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::share::HelloResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::share::HelloResponse, _impl_.reply_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::share::ApplyPodRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::share::ApplyPodRequest, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::share::DeletePodRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::share::DeletePodRequest, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::share::GetPodRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::share::GetPodRequest, _impl_.podname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::share::GetPodResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::share::GetPodResponse, _impl_.poddata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::share::StatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::share::StatusResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::share::RegisterNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::share::RegisterNodeRequest, _impl_.nodename_),
  PROTOBUF_FIELD_OFFSET(::share::RegisterNodeRequest, _impl_.nodeip_),
  PROTOBUF_FIELD_OFFSET(::share::RegisterNodeRequest, _impl_.kubelet_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::share::UpdatePodStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::share::UpdatePodStatusRequest, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::share::ApplyDeploymentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::share::ApplyDeploymentRequest, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::share::GetDeploymentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::share::GetDeploymentRequest, _impl_.deploymentname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::share::DeleteDeploymentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::share::DeleteDeploymentRequest, _impl_.deploymentname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::share::GetDeploymentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::share::GetDeploymentResponse, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::share::ApplyServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::share::ApplyServiceRequest, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::share::GetServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::share::GetServiceRequest, _impl_.servicename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::share::DeleteServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::share::DeleteServiceRequest, _impl_.servicename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::share::GetServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::share::GetServiceResponse, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::share::GetNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::share::GetNodeRequest, _impl_.nodename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::share::GetNodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::share::GetNodeResponse, _impl_.nodedata_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::share::HelloRequest)},
  { 7, -1, -1, sizeof(::share::HelloResponse)},
  { 14, -1, -1, sizeof(::share::ApplyPodRequest)},
  { 21, -1, -1, sizeof(::share::DeletePodRequest)},
  { 28, -1, -1, sizeof(::share::GetPodRequest)},
  { 35, -1, -1, sizeof(::share::GetPodResponse)},
  { 42, -1, -1, sizeof(::share::StatusResponse)},
  { 49, -1, -1, sizeof(::share::RegisterNodeRequest)},
  { 58, -1, -1, sizeof(::share::UpdatePodStatusRequest)},
  { 65, -1, -1, sizeof(::share::ApplyDeploymentRequest)},
  { 72, -1, -1, sizeof(::share::GetDeploymentRequest)},
  { 79, -1, -1, sizeof(::share::DeleteDeploymentRequest)},
  { 86, -1, -1, sizeof(::share::GetDeploymentResponse)},
  { 93, -1, -1, sizeof(::share::ApplyServiceRequest)},
  { 100, -1, -1, sizeof(::share::GetServiceRequest)},
  { 107, -1, -1, sizeof(::share::DeleteServiceRequest)},
  { 114, -1, -1, sizeof(::share::GetServiceResponse)},
  { 121, -1, -1, sizeof(::share::GetNodeRequest)},
  { 128, -1, -1, sizeof(::share::GetNodeResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::share::_HelloRequest_default_instance_._instance,
  &::share::_HelloResponse_default_instance_._instance,
  &::share::_ApplyPodRequest_default_instance_._instance,
  &::share::_DeletePodRequest_default_instance_._instance,
  &::share::_GetPodRequest_default_instance_._instance,
  &::share::_GetPodResponse_default_instance_._instance,
  &::share::_StatusResponse_default_instance_._instance,
  &::share::_RegisterNodeRequest_default_instance_._instance,
  &::share::_UpdatePodStatusRequest_default_instance_._instance,
  &::share::_ApplyDeploymentRequest_default_instance_._instance,
  &::share::_GetDeploymentRequest_default_instance_._instance,
  &::share::_DeleteDeploymentRequest_default_instance_._instance,
  &::share::_GetDeploymentResponse_default_instance_._instance,
  &::share::_ApplyServiceRequest_default_instance_._instance,
  &::share::_GetServiceRequest_default_instance_._instance,
  &::share::_DeleteServiceRequest_default_instance_._instance,
  &::share::_GetServiceResponse_default_instance_._instance,
  &::share::_GetNodeRequest_default_instance_._instance,
  &::share::_GetNodeResponse_default_instance_._instance,
};

const char descriptor_table_protodef_share_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013share.proto\022\005share\"\034\n\014HelloRequest\022\014\n\004"
  "name\030\001 \001(\t\"\036\n\rHelloResponse\022\r\n\005reply\030\001 \001"
  "(\t\"\037\n\017ApplyPodRequest\022\014\n\004data\030\001 \001(\014\" \n\020D"
  "eletePodRequest\022\014\n\004data\030\001 \001(\014\" \n\rGetPodR"
  "equest\022\017\n\007PodName\030\001 \001(\t\"!\n\016GetPodRespons"
  "e\022\017\n\007PodData\030\001 \001(\014\" \n\016StatusResponse\022\016\n\006"
  "status\030\001 \001(\005\"L\n\023RegisterNodeRequest\022\020\n\010N"
  "odeName\030\001 \001(\t\022\016\n\006NodeIp\030\002 \001(\t\022\023\n\013kubelet"
  "_url\030\003 \001(\t\"&\n\026UpdatePodStatusRequest\022\014\n\004"
  "data\030\001 \001(\014\"&\n\026ApplyDeploymentRequest\022\014\n\004"
  "data\030\001 \001(\014\".\n\024GetDeploymentRequest\022\026\n\016De"
  "ploymentName\030\001 \001(\t\"1\n\027DeleteDeploymentRe"
  "quest\022\026\n\016DeploymentName\030\001 \001(\t\"%\n\025GetDepl"
  "oymentResponse\022\014\n\004data\030\001 \001(\014\"#\n\023ApplySer"
  "viceRequest\022\014\n\004data\030\001 \001(\014\"(\n\021GetServiceR"
  "equest\022\023\n\013ServiceName\030\001 \001(\t\"+\n\024DeleteSer"
  "viceRequest\022\023\n\013ServiceName\030\001 \001(\t\"\"\n\022GetS"
  "erviceResponse\022\014\n\004data\030\001 \001(\014\"\"\n\016GetNodeR"
  "equest\022\020\n\010NodeName\030\001 \001(\t\"#\n\017GetNodeRespo"
  "nse\022\020\n\010NodeData\030\001 \001(\014B\023Z\021minik8s/pkg/pro"
  "tob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_share_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_share_2eproto = {
    false, false, 810, descriptor_table_protodef_share_2eproto,
    "share.proto",
    &descriptor_table_share_2eproto_once, nullptr, 0, 19,
    schemas, file_default_instances, TableStruct_share_2eproto::offsets,
    file_level_metadata_share_2eproto, file_level_enum_descriptors_share_2eproto,
    file_level_service_descriptors_share_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_share_2eproto_getter() {
  return &descriptor_table_share_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_share_2eproto(&descriptor_table_share_2eproto);
namespace share {

// ===================================================================

class HelloRequest::_Internal {
 public:
};

HelloRequest::HelloRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:share.HelloRequest)
}
HelloRequest::HelloRequest(const HelloRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HelloRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:share.HelloRequest)
}

inline void HelloRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HelloRequest::~HelloRequest() {
  // @@protoc_insertion_point(destructor:share.HelloRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HelloRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void HelloRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HelloRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:share.HelloRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "share.HelloRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HelloRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:share.HelloRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "share.HelloRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:share.HelloRequest)
  return target;
}

size_t HelloRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:share.HelloRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HelloRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HelloRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HelloRequest::GetClassData() const { return &_class_data_; }


void HelloRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HelloRequest*>(&to_msg);
  auto& from = static_cast<const HelloRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:share.HelloRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HelloRequest::CopyFrom(const HelloRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:share.HelloRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloRequest::IsInitialized() const {
  return true;
}

void HelloRequest::InternalSwap(HelloRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_share_2eproto_getter, &descriptor_table_share_2eproto_once,
      file_level_metadata_share_2eproto[0]);
}

// ===================================================================

class HelloResponse::_Internal {
 public:
};

HelloResponse::HelloResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:share.HelloResponse)
}
HelloResponse::HelloResponse(const HelloResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HelloResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reply_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reply_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reply().empty()) {
    _this->_impl_.reply_.Set(from._internal_reply(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:share.HelloResponse)
}

inline void HelloResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reply_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reply_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reply_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HelloResponse::~HelloResponse() {
  // @@protoc_insertion_point(destructor:share.HelloResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HelloResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reply_.Destroy();
}

void HelloResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HelloResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:share.HelloResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reply_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reply();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "share.HelloResponse.reply"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HelloResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:share.HelloResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string reply = 1;
  if (!this->_internal_reply().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reply().data(), static_cast<int>(this->_internal_reply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "share.HelloResponse.reply");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reply(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:share.HelloResponse)
  return target;
}

size_t HelloResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:share.HelloResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reply = 1;
  if (!this->_internal_reply().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reply());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HelloResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HelloResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HelloResponse::GetClassData() const { return &_class_data_; }


void HelloResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HelloResponse*>(&to_msg);
  auto& from = static_cast<const HelloResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:share.HelloResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reply().empty()) {
    _this->_internal_set_reply(from._internal_reply());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HelloResponse::CopyFrom(const HelloResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:share.HelloResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloResponse::IsInitialized() const {
  return true;
}

void HelloResponse::InternalSwap(HelloResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reply_, lhs_arena,
      &other->_impl_.reply_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_share_2eproto_getter, &descriptor_table_share_2eproto_once,
      file_level_metadata_share_2eproto[1]);
}

// ===================================================================

class ApplyPodRequest::_Internal {
 public:
};

ApplyPodRequest::ApplyPodRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:share.ApplyPodRequest)
}
ApplyPodRequest::ApplyPodRequest(const ApplyPodRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ApplyPodRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:share.ApplyPodRequest)
}

inline void ApplyPodRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ApplyPodRequest::~ApplyPodRequest() {
  // @@protoc_insertion_point(destructor:share.ApplyPodRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ApplyPodRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void ApplyPodRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ApplyPodRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:share.ApplyPodRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplyPodRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ApplyPodRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:share.ApplyPodRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:share.ApplyPodRequest)
  return target;
}

size_t ApplyPodRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:share.ApplyPodRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApplyPodRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ApplyPodRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApplyPodRequest::GetClassData() const { return &_class_data_; }


void ApplyPodRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ApplyPodRequest*>(&to_msg);
  auto& from = static_cast<const ApplyPodRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:share.ApplyPodRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApplyPodRequest::CopyFrom(const ApplyPodRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:share.ApplyPodRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyPodRequest::IsInitialized() const {
  return true;
}

void ApplyPodRequest::InternalSwap(ApplyPodRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyPodRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_share_2eproto_getter, &descriptor_table_share_2eproto_once,
      file_level_metadata_share_2eproto[2]);
}

// ===================================================================

class DeletePodRequest::_Internal {
 public:
};

DeletePodRequest::DeletePodRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:share.DeletePodRequest)
}
DeletePodRequest::DeletePodRequest(const DeletePodRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeletePodRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:share.DeletePodRequest)
}

inline void DeletePodRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeletePodRequest::~DeletePodRequest() {
  // @@protoc_insertion_point(destructor:share.DeletePodRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeletePodRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void DeletePodRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeletePodRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:share.DeletePodRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeletePodRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeletePodRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:share.DeletePodRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:share.DeletePodRequest)
  return target;
}

size_t DeletePodRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:share.DeletePodRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeletePodRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeletePodRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeletePodRequest::GetClassData() const { return &_class_data_; }


void DeletePodRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeletePodRequest*>(&to_msg);
  auto& from = static_cast<const DeletePodRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:share.DeletePodRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeletePodRequest::CopyFrom(const DeletePodRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:share.DeletePodRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePodRequest::IsInitialized() const {
  return true;
}

void DeletePodRequest::InternalSwap(DeletePodRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePodRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_share_2eproto_getter, &descriptor_table_share_2eproto_once,
      file_level_metadata_share_2eproto[3]);
}

// ===================================================================

class GetPodRequest::_Internal {
 public:
};

GetPodRequest::GetPodRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:share.GetPodRequest)
}
GetPodRequest::GetPodRequest(const GetPodRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPodRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.podname_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.podname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.podname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_podname().empty()) {
    _this->_impl_.podname_.Set(from._internal_podname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:share.GetPodRequest)
}

inline void GetPodRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.podname_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.podname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.podname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPodRequest::~GetPodRequest() {
  // @@protoc_insertion_point(destructor:share.GetPodRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPodRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.podname_.Destroy();
}

void GetPodRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPodRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:share.GetPodRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.podname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPodRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string PodName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_podname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "share.GetPodRequest.PodName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPodRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:share.GetPodRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string PodName = 1;
  if (!this->_internal_podname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_podname().data(), static_cast<int>(this->_internal_podname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "share.GetPodRequest.PodName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_podname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:share.GetPodRequest)
  return target;
}

size_t GetPodRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:share.GetPodRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string PodName = 1;
  if (!this->_internal_podname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_podname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPodRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPodRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPodRequest::GetClassData() const { return &_class_data_; }


void GetPodRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPodRequest*>(&to_msg);
  auto& from = static_cast<const GetPodRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:share.GetPodRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_podname().empty()) {
    _this->_internal_set_podname(from._internal_podname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPodRequest::CopyFrom(const GetPodRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:share.GetPodRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPodRequest::IsInitialized() const {
  return true;
}

void GetPodRequest::InternalSwap(GetPodRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.podname_, lhs_arena,
      &other->_impl_.podname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPodRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_share_2eproto_getter, &descriptor_table_share_2eproto_once,
      file_level_metadata_share_2eproto[4]);
}

// ===================================================================

class GetPodResponse::_Internal {
 public:
};

GetPodResponse::GetPodResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:share.GetPodResponse)
}
GetPodResponse::GetPodResponse(const GetPodResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetPodResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.poddata_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.poddata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.poddata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_poddata().empty()) {
    _this->_impl_.poddata_.Set(from._internal_poddata(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:share.GetPodResponse)
}

inline void GetPodResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.poddata_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.poddata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.poddata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPodResponse::~GetPodResponse() {
  // @@protoc_insertion_point(destructor:share.GetPodResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPodResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.poddata_.Destroy();
}

void GetPodResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPodResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:share.GetPodResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.poddata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPodResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes PodData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_poddata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPodResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:share.GetPodResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes PodData = 1;
  if (!this->_internal_poddata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_poddata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:share.GetPodResponse)
  return target;
}

size_t GetPodResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:share.GetPodResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes PodData = 1;
  if (!this->_internal_poddata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_poddata());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPodResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetPodResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPodResponse::GetClassData() const { return &_class_data_; }


void GetPodResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetPodResponse*>(&to_msg);
  auto& from = static_cast<const GetPodResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:share.GetPodResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_poddata().empty()) {
    _this->_internal_set_poddata(from._internal_poddata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPodResponse::CopyFrom(const GetPodResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:share.GetPodResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPodResponse::IsInitialized() const {
  return true;
}

void GetPodResponse::InternalSwap(GetPodResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.poddata_, lhs_arena,
      &other->_impl_.poddata_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPodResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_share_2eproto_getter, &descriptor_table_share_2eproto_once,
      file_level_metadata_share_2eproto[5]);
}

// ===================================================================

class StatusResponse::_Internal {
 public:
};

StatusResponse::StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:share.StatusResponse)
}
StatusResponse::StatusResponse(const StatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:share.StatusResponse)
}

inline void StatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:share.StatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:share.StatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:share.StatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:share.StatusResponse)
  return target;
}

size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:share.StatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusResponse::GetClassData() const { return &_class_data_; }


void StatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatusResponse*>(&to_msg);
  auto& from = static_cast<const StatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:share.StatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:share.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  return true;
}

void StatusResponse::InternalSwap(StatusResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_share_2eproto_getter, &descriptor_table_share_2eproto_once,
      file_level_metadata_share_2eproto[6]);
}

// ===================================================================

class RegisterNodeRequest::_Internal {
 public:
};

RegisterNodeRequest::RegisterNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:share.RegisterNodeRequest)
}
RegisterNodeRequest::RegisterNodeRequest(const RegisterNodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterNodeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodename_){}
    , decltype(_impl_.nodeip_){}
    , decltype(_impl_.kubelet_url_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nodename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nodename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nodename().empty()) {
    _this->_impl_.nodename_.Set(from._internal_nodename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nodeip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nodeip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nodeip().empty()) {
    _this->_impl_.nodeip_.Set(from._internal_nodeip(), 
      _this->GetArenaForAllocation());
  }
  _impl_.kubelet_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kubelet_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_kubelet_url().empty()) {
    _this->_impl_.kubelet_url_.Set(from._internal_kubelet_url(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:share.RegisterNodeRequest)
}

inline void RegisterNodeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodename_){}
    , decltype(_impl_.nodeip_){}
    , decltype(_impl_.kubelet_url_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nodename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nodename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nodeip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nodeip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.kubelet_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.kubelet_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterNodeRequest::~RegisterNodeRequest() {
  // @@protoc_insertion_point(destructor:share.RegisterNodeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterNodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodename_.Destroy();
  _impl_.nodeip_.Destroy();
  _impl_.kubelet_url_.Destroy();
}

void RegisterNodeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:share.RegisterNodeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodename_.ClearToEmpty();
  _impl_.nodeip_.ClearToEmpty();
  _impl_.kubelet_url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterNodeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string NodeName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nodename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "share.RegisterNodeRequest.NodeName"));
        } else
          goto handle_unusual;
        continue;
      // string NodeIp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nodeip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "share.RegisterNodeRequest.NodeIp"));
        } else
          goto handle_unusual;
        continue;
      // string kubelet_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_kubelet_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "share.RegisterNodeRequest.kubelet_url"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterNodeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:share.RegisterNodeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string NodeName = 1;
  if (!this->_internal_nodename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodename().data(), static_cast<int>(this->_internal_nodename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "share.RegisterNodeRequest.NodeName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nodename(), target);
  }

  // string NodeIp = 2;
  if (!this->_internal_nodeip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodeip().data(), static_cast<int>(this->_internal_nodeip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "share.RegisterNodeRequest.NodeIp");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nodeip(), target);
  }

  // string kubelet_url = 3;
  if (!this->_internal_kubelet_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kubelet_url().data(), static_cast<int>(this->_internal_kubelet_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "share.RegisterNodeRequest.kubelet_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_kubelet_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:share.RegisterNodeRequest)
  return target;
}

size_t RegisterNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:share.RegisterNodeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string NodeName = 1;
  if (!this->_internal_nodename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodename());
  }

  // string NodeIp = 2;
  if (!this->_internal_nodeip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodeip());
  }

  // string kubelet_url = 3;
  if (!this->_internal_kubelet_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kubelet_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterNodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterNodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterNodeRequest::GetClassData() const { return &_class_data_; }


void RegisterNodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterNodeRequest*>(&to_msg);
  auto& from = static_cast<const RegisterNodeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:share.RegisterNodeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nodename().empty()) {
    _this->_internal_set_nodename(from._internal_nodename());
  }
  if (!from._internal_nodeip().empty()) {
    _this->_internal_set_nodeip(from._internal_nodeip());
  }
  if (!from._internal_kubelet_url().empty()) {
    _this->_internal_set_kubelet_url(from._internal_kubelet_url());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterNodeRequest::CopyFrom(const RegisterNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:share.RegisterNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterNodeRequest::IsInitialized() const {
  return true;
}

void RegisterNodeRequest::InternalSwap(RegisterNodeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nodename_, lhs_arena,
      &other->_impl_.nodename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nodeip_, lhs_arena,
      &other->_impl_.nodeip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.kubelet_url_, lhs_arena,
      &other->_impl_.kubelet_url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterNodeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_share_2eproto_getter, &descriptor_table_share_2eproto_once,
      file_level_metadata_share_2eproto[7]);
}

// ===================================================================

class UpdatePodStatusRequest::_Internal {
 public:
};

UpdatePodStatusRequest::UpdatePodStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:share.UpdatePodStatusRequest)
}
UpdatePodStatusRequest::UpdatePodStatusRequest(const UpdatePodStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdatePodStatusRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:share.UpdatePodStatusRequest)
}

inline void UpdatePodStatusRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdatePodStatusRequest::~UpdatePodStatusRequest() {
  // @@protoc_insertion_point(destructor:share.UpdatePodStatusRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdatePodStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void UpdatePodStatusRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdatePodStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:share.UpdatePodStatusRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePodStatusRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdatePodStatusRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:share.UpdatePodStatusRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:share.UpdatePodStatusRequest)
  return target;
}

size_t UpdatePodStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:share.UpdatePodStatusRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdatePodStatusRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdatePodStatusRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdatePodStatusRequest::GetClassData() const { return &_class_data_; }


void UpdatePodStatusRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdatePodStatusRequest*>(&to_msg);
  auto& from = static_cast<const UpdatePodStatusRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:share.UpdatePodStatusRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdatePodStatusRequest::CopyFrom(const UpdatePodStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:share.UpdatePodStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePodStatusRequest::IsInitialized() const {
  return true;
}

void UpdatePodStatusRequest::InternalSwap(UpdatePodStatusRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePodStatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_share_2eproto_getter, &descriptor_table_share_2eproto_once,
      file_level_metadata_share_2eproto[8]);
}

// ===================================================================

class ApplyDeploymentRequest::_Internal {
 public:
};

ApplyDeploymentRequest::ApplyDeploymentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:share.ApplyDeploymentRequest)
}
ApplyDeploymentRequest::ApplyDeploymentRequest(const ApplyDeploymentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ApplyDeploymentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:share.ApplyDeploymentRequest)
}

inline void ApplyDeploymentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ApplyDeploymentRequest::~ApplyDeploymentRequest() {
  // @@protoc_insertion_point(destructor:share.ApplyDeploymentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ApplyDeploymentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void ApplyDeploymentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ApplyDeploymentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:share.ApplyDeploymentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplyDeploymentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ApplyDeploymentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:share.ApplyDeploymentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:share.ApplyDeploymentRequest)
  return target;
}

size_t ApplyDeploymentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:share.ApplyDeploymentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApplyDeploymentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ApplyDeploymentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApplyDeploymentRequest::GetClassData() const { return &_class_data_; }


void ApplyDeploymentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ApplyDeploymentRequest*>(&to_msg);
  auto& from = static_cast<const ApplyDeploymentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:share.ApplyDeploymentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApplyDeploymentRequest::CopyFrom(const ApplyDeploymentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:share.ApplyDeploymentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyDeploymentRequest::IsInitialized() const {
  return true;
}

void ApplyDeploymentRequest::InternalSwap(ApplyDeploymentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyDeploymentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_share_2eproto_getter, &descriptor_table_share_2eproto_once,
      file_level_metadata_share_2eproto[9]);
}

// ===================================================================

class GetDeploymentRequest::_Internal {
 public:
};

GetDeploymentRequest::GetDeploymentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:share.GetDeploymentRequest)
}
GetDeploymentRequest::GetDeploymentRequest(const GetDeploymentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDeploymentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.deploymentname_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.deploymentname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deploymentname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deploymentname().empty()) {
    _this->_impl_.deploymentname_.Set(from._internal_deploymentname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:share.GetDeploymentRequest)
}

inline void GetDeploymentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.deploymentname_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.deploymentname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deploymentname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDeploymentRequest::~GetDeploymentRequest() {
  // @@protoc_insertion_point(destructor:share.GetDeploymentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDeploymentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deploymentname_.Destroy();
}

void GetDeploymentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDeploymentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:share.GetDeploymentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deploymentname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeploymentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string DeploymentName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deploymentname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "share.GetDeploymentRequest.DeploymentName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDeploymentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:share.GetDeploymentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string DeploymentName = 1;
  if (!this->_internal_deploymentname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deploymentname().data(), static_cast<int>(this->_internal_deploymentname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "share.GetDeploymentRequest.DeploymentName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deploymentname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:share.GetDeploymentRequest)
  return target;
}

size_t GetDeploymentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:share.GetDeploymentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string DeploymentName = 1;
  if (!this->_internal_deploymentname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deploymentname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeploymentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDeploymentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeploymentRequest::GetClassData() const { return &_class_data_; }


void GetDeploymentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDeploymentRequest*>(&to_msg);
  auto& from = static_cast<const GetDeploymentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:share.GetDeploymentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_deploymentname().empty()) {
    _this->_internal_set_deploymentname(from._internal_deploymentname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeploymentRequest::CopyFrom(const GetDeploymentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:share.GetDeploymentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeploymentRequest::IsInitialized() const {
  return true;
}

void GetDeploymentRequest::InternalSwap(GetDeploymentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deploymentname_, lhs_arena,
      &other->_impl_.deploymentname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeploymentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_share_2eproto_getter, &descriptor_table_share_2eproto_once,
      file_level_metadata_share_2eproto[10]);
}

// ===================================================================

class DeleteDeploymentRequest::_Internal {
 public:
};

DeleteDeploymentRequest::DeleteDeploymentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:share.DeleteDeploymentRequest)
}
DeleteDeploymentRequest::DeleteDeploymentRequest(const DeleteDeploymentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteDeploymentRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.deploymentname_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.deploymentname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deploymentname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_deploymentname().empty()) {
    _this->_impl_.deploymentname_.Set(from._internal_deploymentname(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:share.DeleteDeploymentRequest)
}

inline void DeleteDeploymentRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.deploymentname_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.deploymentname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.deploymentname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteDeploymentRequest::~DeleteDeploymentRequest() {
  // @@protoc_insertion_point(destructor:share.DeleteDeploymentRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteDeploymentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deploymentname_.Destroy();
}

void DeleteDeploymentRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteDeploymentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:share.DeleteDeploymentRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deploymentname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDeploymentRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string DeploymentName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deploymentname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "share.DeleteDeploymentRequest.DeploymentName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteDeploymentRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:share.DeleteDeploymentRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string DeploymentName = 1;
  if (!this->_internal_deploymentname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deploymentname().data(), static_cast<int>(this->_internal_deploymentname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "share.DeleteDeploymentRequest.DeploymentName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deploymentname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:share.DeleteDeploymentRequest)
  return target;
}

size_t DeleteDeploymentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:share.DeleteDeploymentRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string DeploymentName = 1;
  if (!this->_internal_deploymentname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deploymentname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteDeploymentRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteDeploymentRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteDeploymentRequest::GetClassData() const { return &_class_data_; }


void DeleteDeploymentRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteDeploymentRequest*>(&to_msg);
  auto& from = static_cast<const DeleteDeploymentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:share.DeleteDeploymentRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_deploymentname().empty()) {
    _this->_internal_set_deploymentname(from._internal_deploymentname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteDeploymentRequest::CopyFrom(const DeleteDeploymentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:share.DeleteDeploymentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDeploymentRequest::IsInitialized() const {
  return true;
}

void DeleteDeploymentRequest::InternalSwap(DeleteDeploymentRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.deploymentname_, lhs_arena,
      &other->_impl_.deploymentname_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDeploymentRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_share_2eproto_getter, &descriptor_table_share_2eproto_once,
      file_level_metadata_share_2eproto[11]);
}

// ===================================================================

class GetDeploymentResponse::_Internal {
 public:
};

GetDeploymentResponse::GetDeploymentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:share.GetDeploymentResponse)
}
GetDeploymentResponse::GetDeploymentResponse(const GetDeploymentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDeploymentResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:share.GetDeploymentResponse)
}

inline void GetDeploymentResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetDeploymentResponse::~GetDeploymentResponse() {
  // @@protoc_insertion_point(destructor:share.GetDeploymentResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDeploymentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void GetDeploymentResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDeploymentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:share.GetDeploymentResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDeploymentResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDeploymentResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:share.GetDeploymentResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:share.GetDeploymentResponse)
  return target;
}

size_t GetDeploymentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:share.GetDeploymentResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDeploymentResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDeploymentResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDeploymentResponse::GetClassData() const { return &_class_data_; }


void GetDeploymentResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDeploymentResponse*>(&to_msg);
  auto& from = static_cast<const GetDeploymentResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:share.GetDeploymentResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDeploymentResponse::CopyFrom(const GetDeploymentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:share.GetDeploymentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDeploymentResponse::IsInitialized() const {
  return true;
}

void GetDeploymentResponse::InternalSwap(GetDeploymentResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDeploymentResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_share_2eproto_getter, &descriptor_table_share_2eproto_once,
      file_level_metadata_share_2eproto[12]);
}

// ===================================================================

class ApplyServiceRequest::_Internal {
 public:
};

ApplyServiceRequest::ApplyServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:share.ApplyServiceRequest)
}
ApplyServiceRequest::ApplyServiceRequest(const ApplyServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ApplyServiceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:share.ApplyServiceRequest)
}

inline void ApplyServiceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ApplyServiceRequest::~ApplyServiceRequest() {
  // @@protoc_insertion_point(destructor:share.ApplyServiceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ApplyServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void ApplyServiceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ApplyServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:share.ApplyServiceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplyServiceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ApplyServiceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:share.ApplyServiceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:share.ApplyServiceRequest)
  return target;
}

size_t ApplyServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:share.ApplyServiceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApplyServiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ApplyServiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApplyServiceRequest::GetClassData() const { return &_class_data_; }


void ApplyServiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ApplyServiceRequest*>(&to_msg);
  auto& from = static_cast<const ApplyServiceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:share.ApplyServiceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApplyServiceRequest::CopyFrom(const ApplyServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:share.ApplyServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyServiceRequest::IsInitialized() const {
  return true;
}

void ApplyServiceRequest::InternalSwap(ApplyServiceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyServiceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_share_2eproto_getter, &descriptor_table_share_2eproto_once,
      file_level_metadata_share_2eproto[13]);
}

// ===================================================================

class GetServiceRequest::_Internal {
 public:
};

GetServiceRequest::GetServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:share.GetServiceRequest)
}
GetServiceRequest::GetServiceRequest(const GetServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetServiceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.servicename_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.servicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_servicename().empty()) {
    _this->_impl_.servicename_.Set(from._internal_servicename(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:share.GetServiceRequest)
}

inline void GetServiceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.servicename_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.servicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetServiceRequest::~GetServiceRequest() {
  // @@protoc_insertion_point(destructor:share.GetServiceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.servicename_.Destroy();
}

void GetServiceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:share.GetServiceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.servicename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ServiceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_servicename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "share.GetServiceRequest.ServiceName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetServiceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:share.GetServiceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ServiceName = 1;
  if (!this->_internal_servicename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicename().data(), static_cast<int>(this->_internal_servicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "share.GetServiceRequest.ServiceName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_servicename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:share.GetServiceRequest)
  return target;
}

size_t GetServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:share.GetServiceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ServiceName = 1;
  if (!this->_internal_servicename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicename());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetServiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServiceRequest::GetClassData() const { return &_class_data_; }


void GetServiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetServiceRequest*>(&to_msg);
  auto& from = static_cast<const GetServiceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:share.GetServiceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_servicename().empty()) {
    _this->_internal_set_servicename(from._internal_servicename());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServiceRequest::CopyFrom(const GetServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:share.GetServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceRequest::IsInitialized() const {
  return true;
}

void GetServiceRequest::InternalSwap(GetServiceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.servicename_, lhs_arena,
      &other->_impl_.servicename_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_share_2eproto_getter, &descriptor_table_share_2eproto_once,
      file_level_metadata_share_2eproto[14]);
}

// ===================================================================

class DeleteServiceRequest::_Internal {
 public:
};

DeleteServiceRequest::DeleteServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:share.DeleteServiceRequest)
}
DeleteServiceRequest::DeleteServiceRequest(const DeleteServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteServiceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.servicename_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.servicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_servicename().empty()) {
    _this->_impl_.servicename_.Set(from._internal_servicename(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:share.DeleteServiceRequest)
}

inline void DeleteServiceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.servicename_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.servicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteServiceRequest::~DeleteServiceRequest() {
  // @@protoc_insertion_point(destructor:share.DeleteServiceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.servicename_.Destroy();
}

void DeleteServiceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:share.DeleteServiceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.servicename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteServiceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ServiceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_servicename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "share.DeleteServiceRequest.ServiceName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteServiceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:share.DeleteServiceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ServiceName = 1;
  if (!this->_internal_servicename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicename().data(), static_cast<int>(this->_internal_servicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "share.DeleteServiceRequest.ServiceName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_servicename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:share.DeleteServiceRequest)
  return target;
}

size_t DeleteServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:share.DeleteServiceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ServiceName = 1;
  if (!this->_internal_servicename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicename());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteServiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteServiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteServiceRequest::GetClassData() const { return &_class_data_; }


void DeleteServiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteServiceRequest*>(&to_msg);
  auto& from = static_cast<const DeleteServiceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:share.DeleteServiceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_servicename().empty()) {
    _this->_internal_set_servicename(from._internal_servicename());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteServiceRequest::CopyFrom(const DeleteServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:share.DeleteServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteServiceRequest::IsInitialized() const {
  return true;
}

void DeleteServiceRequest::InternalSwap(DeleteServiceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.servicename_, lhs_arena,
      &other->_impl_.servicename_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteServiceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_share_2eproto_getter, &descriptor_table_share_2eproto_once,
      file_level_metadata_share_2eproto[15]);
}

// ===================================================================

class GetServiceResponse::_Internal {
 public:
};

GetServiceResponse::GetServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:share.GetServiceResponse)
}
GetServiceResponse::GetServiceResponse(const GetServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetServiceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:share.GetServiceResponse)
}

inline void GetServiceResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetServiceResponse::~GetServiceResponse() {
  // @@protoc_insertion_point(destructor:share.GetServiceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetServiceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void GetServiceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:share.GetServiceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetServiceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetServiceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:share.GetServiceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:share.GetServiceResponse)
  return target;
}

size_t GetServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:share.GetServiceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetServiceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetServiceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetServiceResponse::GetClassData() const { return &_class_data_; }


void GetServiceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetServiceResponse*>(&to_msg);
  auto& from = static_cast<const GetServiceResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:share.GetServiceResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetServiceResponse::CopyFrom(const GetServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:share.GetServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceResponse::IsInitialized() const {
  return true;
}

void GetServiceResponse::InternalSwap(GetServiceResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetServiceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_share_2eproto_getter, &descriptor_table_share_2eproto_once,
      file_level_metadata_share_2eproto[16]);
}

// ===================================================================

class GetNodeRequest::_Internal {
 public:
};

GetNodeRequest::GetNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:share.GetNodeRequest)
}
GetNodeRequest::GetNodeRequest(const GetNodeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetNodeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodename_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nodename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nodename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nodename().empty()) {
    _this->_impl_.nodename_.Set(from._internal_nodename(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:share.GetNodeRequest)
}

inline void GetNodeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodename_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nodename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nodename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetNodeRequest::~GetNodeRequest() {
  // @@protoc_insertion_point(destructor:share.GetNodeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetNodeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodename_.Destroy();
}

void GetNodeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:share.GetNodeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNodeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string NodeName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nodename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "share.GetNodeRequest.NodeName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetNodeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:share.GetNodeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string NodeName = 1;
  if (!this->_internal_nodename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodename().data(), static_cast<int>(this->_internal_nodename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "share.GetNodeRequest.NodeName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nodename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:share.GetNodeRequest)
  return target;
}

size_t GetNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:share.GetNodeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string NodeName = 1;
  if (!this->_internal_nodename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodename());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetNodeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetNodeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetNodeRequest::GetClassData() const { return &_class_data_; }


void GetNodeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetNodeRequest*>(&to_msg);
  auto& from = static_cast<const GetNodeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:share.GetNodeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nodename().empty()) {
    _this->_internal_set_nodename(from._internal_nodename());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetNodeRequest::CopyFrom(const GetNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:share.GetNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeRequest::IsInitialized() const {
  return true;
}

void GetNodeRequest::InternalSwap(GetNodeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nodename_, lhs_arena,
      &other->_impl_.nodename_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNodeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_share_2eproto_getter, &descriptor_table_share_2eproto_once,
      file_level_metadata_share_2eproto[17]);
}

// ===================================================================

class GetNodeResponse::_Internal {
 public:
};

GetNodeResponse::GetNodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:share.GetNodeResponse)
}
GetNodeResponse::GetNodeResponse(const GetNodeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetNodeResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodedata_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nodedata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nodedata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nodedata().empty()) {
    _this->_impl_.nodedata_.Set(from._internal_nodedata(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:share.GetNodeResponse)
}

inline void GetNodeResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodedata_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nodedata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nodedata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetNodeResponse::~GetNodeResponse() {
  // @@protoc_insertion_point(destructor:share.GetNodeResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetNodeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodedata_.Destroy();
}

void GetNodeResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetNodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:share.GetNodeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodedata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNodeResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes NodeData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_nodedata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetNodeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:share.GetNodeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes NodeData = 1;
  if (!this->_internal_nodedata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_nodedata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:share.GetNodeResponse)
  return target;
}

size_t GetNodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:share.GetNodeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes NodeData = 1;
  if (!this->_internal_nodedata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nodedata());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetNodeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetNodeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetNodeResponse::GetClassData() const { return &_class_data_; }


void GetNodeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetNodeResponse*>(&to_msg);
  auto& from = static_cast<const GetNodeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:share.GetNodeResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nodedata().empty()) {
    _this->_internal_set_nodedata(from._internal_nodedata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetNodeResponse::CopyFrom(const GetNodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:share.GetNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNodeResponse::IsInitialized() const {
  return true;
}

void GetNodeResponse::InternalSwap(GetNodeResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nodedata_, lhs_arena,
      &other->_impl_.nodedata_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNodeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_share_2eproto_getter, &descriptor_table_share_2eproto_once,
      file_level_metadata_share_2eproto[18]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace share
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::share::HelloRequest*
Arena::CreateMaybeMessage< ::share::HelloRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::share::HelloRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::share::HelloResponse*
Arena::CreateMaybeMessage< ::share::HelloResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::share::HelloResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::share::ApplyPodRequest*
Arena::CreateMaybeMessage< ::share::ApplyPodRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::share::ApplyPodRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::share::DeletePodRequest*
Arena::CreateMaybeMessage< ::share::DeletePodRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::share::DeletePodRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::share::GetPodRequest*
Arena::CreateMaybeMessage< ::share::GetPodRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::share::GetPodRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::share::GetPodResponse*
Arena::CreateMaybeMessage< ::share::GetPodResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::share::GetPodResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::share::StatusResponse*
Arena::CreateMaybeMessage< ::share::StatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::share::StatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::share::RegisterNodeRequest*
Arena::CreateMaybeMessage< ::share::RegisterNodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::share::RegisterNodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::share::UpdatePodStatusRequest*
Arena::CreateMaybeMessage< ::share::UpdatePodStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::share::UpdatePodStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::share::ApplyDeploymentRequest*
Arena::CreateMaybeMessage< ::share::ApplyDeploymentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::share::ApplyDeploymentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::share::GetDeploymentRequest*
Arena::CreateMaybeMessage< ::share::GetDeploymentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::share::GetDeploymentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::share::DeleteDeploymentRequest*
Arena::CreateMaybeMessage< ::share::DeleteDeploymentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::share::DeleteDeploymentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::share::GetDeploymentResponse*
Arena::CreateMaybeMessage< ::share::GetDeploymentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::share::GetDeploymentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::share::ApplyServiceRequest*
Arena::CreateMaybeMessage< ::share::ApplyServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::share::ApplyServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::share::GetServiceRequest*
Arena::CreateMaybeMessage< ::share::GetServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::share::GetServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::share::DeleteServiceRequest*
Arena::CreateMaybeMessage< ::share::DeleteServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::share::DeleteServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::share::GetServiceResponse*
Arena::CreateMaybeMessage< ::share::GetServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::share::GetServiceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::share::GetNodeRequest*
Arena::CreateMaybeMessage< ::share::GetNodeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::share::GetNodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::share::GetNodeResponse*
Arena::CreateMaybeMessage< ::share::GetNodeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::share::GetNodeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
